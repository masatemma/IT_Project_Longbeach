{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\houst\\\\projects\\\\IT_Project_Longbeach\\\\mern\\\\client\\\\src\\\\components\\\\edit.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Edit() {\n  _s();\n  const [form, setForm] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    email_address: \"\",\n    records: []\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      try {\n        const response = await fetch(`http://localhost:5050/record/${params.id.toString()}`);\n        if (!response.ok) {\n          const message = `An error has occurred: ${response.statusText}`;\n          window.alert(message);\n          return;\n        }\n        const record = await response.json();\n        if (!record) {\n          window.alert(`Record with id ${id} not found`);\n          navigate(\"/\");\n          return;\n        }\n        setForm(record);\n      } catch (error) {\n        window.alert(\"Network error occurred\");\n      }\n    }\n    fetchData();\n    return;\n  }, [params.id, navigate]);\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm(prev => {\n      return {\n        ...prev,\n        ...value\n      };\n    });\n  }\n  async function onSubmit(e) {\n    e.preventDefault();\n    const editedPerson = {\n      first_name: form.first_name,\n      last_name: form.last_name,\n      email_address: form.email_address\n    };\n\n    // This will send a post request to update the data in the database.\n    await fetch(`http://localhost:5050/record/${params.id}`, {\n      method: \"PATCH\",\n      body: JSON.stringify(editedPerson),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    navigate(\"/\");\n  }\n\n  // This following section will display the form that takes input from the user to update the data.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Update Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"first_name\",\n          children: \"First Name: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          id: \"first_name\",\n          value: form.first_name,\n          onChange: e => updateForm({\n            first_name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"last_name\",\n          children: \"Position: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          id: \"last_name\",\n          value: form.last_name,\n          onChange: e => updateForm({\n            last_name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email_address\",\n          children: \" Email: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          id: \"email_address\",\n          value: form.email_address,\n          onChange: e => updateForm({\n            email_address: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Update Record\",\n          className: \"btn btn-primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 4\n  }, this);\n}\n_s(Edit, \"tSrAubeJN/b2NMm9C6X+k5OJGvk=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Edit;\nvar _c;\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","jsxDEV","_jsxDEV","Edit","_s","form","setForm","first_name","last_name","email_address","records","params","navigate","fetchData","id","toString","response","fetch","ok","message","statusText","window","alert","record","json","error","updateForm","value","prev","onSubmit","e","preventDefault","editedPerson","method","body","JSON","stringify","headers","children","fileName","_jsxFileName","lineNumber","columnNumber","className","htmlFor","type","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/houst/projects/IT_Project_Longbeach/mern/client/src/components/edit.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router\";\r\n \r\nexport default function Edit() {\r\n const [form, setForm] = useState({\r\n   first_name: \"\",\r\n   last_name: \"\",\r\n   email_address: \"\",\r\n   records: [],\r\n });\r\n const params = useParams();\r\n const navigate = useNavigate();\r\n \r\n useEffect(() => {\r\n    async function fetchData() {\r\n      const id = params.id.toString();\r\n      try {\r\n      const response = await fetch(`http://localhost:5050/record/${params.id.toString()}`);\r\n  \r\n      if (!response.ok) {\r\n        const message = `An error has occurred: ${response.statusText}`;\r\n        window.alert(message);\r\n        return;\r\n      }\r\n  \r\n      const record = await response.json();\r\n      if (!record) {\r\n        window.alert(`Record with id ${id} not found`);\r\n        navigate(\"/\");\r\n        return;\r\n      }\r\n  \r\n      setForm(record);\r\n    } \r\n    catch (error) {\r\n      window.alert(\"Network error occurred\");\r\n    }\r\n    }\r\n\r\n    fetchData();\r\n    return;\r\n  }, [params.id, navigate]);\r\n \r\n // These methods will update the state properties.\r\n function updateForm(value) {\r\n   return setForm((prev) => {\r\n     return { ...prev, ...value };\r\n   });\r\n }\r\n \r\n async function onSubmit(e) { \r\n    e.preventDefault();\r\n    const editedPerson = {\r\n      first_name: form.first_name,\r\n      last_name: form.last_name,\r\n      email_address: form.email_address\r\n    };\r\n  \r\n    // This will send a post request to update the data in the database.\r\n    await fetch(`http://localhost:5050/record/${params.id}`, {\r\n      method: \"PATCH\",\r\n      body: JSON.stringify(editedPerson),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n    });\r\n  \r\n    navigate(\"/\");\r\n }\r\n \r\n // This following section will display the form that takes input from the user to update the data.\r\n return (\r\n   <div>\r\n     <h3>Update Record</h3>\r\n     <form onSubmit={onSubmit}>\r\n       <div className=\"form-group\">\r\n         <label htmlFor=\"first_name\">First Name: </label>\r\n         <input\r\n           type=\"text\"\r\n           className=\"form-control\"\r\n           id=\"first_name\"\r\n           value={form.first_name}\r\n           onChange={(e) => updateForm({ first_name: e.target.value })}\r\n         />\r\n       </div>\r\n       <div className=\"form-group\">\r\n         <label htmlFor=\"last_name\">Position: </label>\r\n         <input\r\n           type=\"text\"\r\n           className=\"form-control\"\r\n           id=\"last_name\"\r\n           value={form.last_name}\r\n           onChange={(e) => updateForm({ last_name: e.target.value })}\r\n         />\r\n       </div>\r\n       <div>\r\n        <label htmlFor=\"email_address\"> Email: </label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          id=\"email_address\"\r\n          value={form.email_address}\r\n          onChange={(e) => updateForm({ email_address: e.target.value })}\r\n        />\r\n       </div>\r\n       <br />\r\n       <div className=\"form-group\">\r\n         <input\r\n           type=\"submit\"\r\n           value=\"Update Record\"\r\n           className=\"btn btn-primary\"\r\n         />\r\n       </div>\r\n     </form>\r\n   </div>\r\n );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}